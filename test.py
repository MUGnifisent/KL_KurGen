from dijkstar import Graph, find_path

graph = Graph ()
graph.add_edge(0, 1, 1)
graph.add_edge(0, 4, 1)
graph.add_edge(0, 8, 1)
graph.add_edge(0, 2, 1)
graph.add_edge(1, 3, 1)
graph.add_edge(1, 9, 1)
graph.add_edge(1, 5, 1)
graph.add_edge(3, 2, 1)
graph.add_edge(3, 7, 1)
graph.add_edge(3, 11, 1)
graph.add_edge(2, 10, 1)
graph.add_edge(2, 6, 1)
graph.add_edge(4, 12, 1)
graph.add_edge(4, 5, 1)
graph.add_edge(4, 6, 1)
graph.add_edge(5, 13, 1)
graph.add_edge(5, 7, 1)
graph.add_edge(7, 15, 1)
graph.add_edge(7, 6, 1)
graph.add_edge(6, 14, 1)
graph.add_edge(12, 8, 1)
graph.add_edge(12, 14, 1)
graph.add_edge(12, 13, 1)
graph.add_edge(13, 15, 1)
graph.add_edge(13, 9, 1)
graph.add_edge(15, 11, 1)
graph.add_edge(15, 14, 1)
graph.add_edge(14, 10, 1)
graph.add_edge(8, 10, 1)
graph.add_edge(8, 9, 1)
graph.add_edge(9, 11, 1)
graph.add_edge(11, 10, 1)

shortest_path = find_path(graph, 1, 4)

print(graph)
print(shortest_path)

n = shortest_path.costs
print(n)